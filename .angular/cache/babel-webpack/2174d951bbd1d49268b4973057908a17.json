{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { responseToCityWeather, responseToCityDailyWeather } from '../utils/response.utils';\nimport { environment } from './../../../environments/environment';\n/* import { AppState } from '../state/app.reducer'; */\n\nimport { Units } from '../models/units.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WeatherService = /*#__PURE__*/(() => {\n  class WeatherService {\n    /*   constructor(private http: HttpClient, private store: Store<AppState>) {\r\n          store\r\n            .pipe(\r\n                select(fromConfigSelectors.selectUnitConfig),\r\n                takeUntil(this.serviceDestroyed$),\r\n            )\r\n            .subscribe((unit: Units) => this.unit = unit);\r\n      } */\n    constructor(http) {\n      this.http = http;\n      this.serviceDestroyed$ = new Subject();\n    }\n\n    ngOnDestroy() {\n      this.serviceDestroyed$.next();\n      this.serviceDestroyed$.unsubscribe();\n    }\n\n    getCityWeatherByQuery(query) {\n      const params = new HttpParams({\n        fromObject: {\n          q: query\n        }\n      });\n      return this.doGet('weather', params).pipe(map(response => responseToCityWeather(response)));\n    }\n\n    getCityWeatherById(id) {\n      const params = new HttpParams({\n        fromObject: {\n          id\n        }\n      });\n      return this.doGet('weather', params).pipe(map(response => responseToCityWeather(response)));\n    }\n\n    getCityWeatherByCoord(lat, lon) {\n      const params = new HttpParams({\n        fromObject: {\n          lat: lat.toString(),\n          lon: lon.toString()\n        }\n      });\n      return this.doGet('weather', params).pipe(map(response => responseToCityWeather(response)));\n    }\n\n    getWeatherDetails(lat, lon) {\n      const params = new HttpParams({\n        fromObject: {\n          lat: lat.toString(),\n          lon: lon.toString(),\n          exclude: 'minutely,hourly'\n        }\n      });\n      return this.doGet('onecall', params).pipe(map(response => responseToCityDailyWeather(response)));\n    }\n\n    doGet(url, params) {\n      params = params.append('appid', environment.apiKey);\n      params = params.append('lang', 'pt_br');\n\n      if (this.unit !== Units.SI) {\n        params = params.append('units', this.unit.toLocaleLowerCase());\n      }\n\n      return this.http.get(`https://api.openweathermap.org/data/2.5/${url}`, {\n        params\n      });\n    }\n\n  }\n\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherService;\n})();","map":null,"metadata":{},"sourceType":"module"}