{"ast":null,"code":"import { select } from '@ngrx/store';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, map, catchError, withLatestFrom } from 'rxjs/operators';\nimport * as fromDetailsActions from './details.actions';\nimport * as fromRouterSelectors from '../../../shared/state/router/router.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/shared/services/weather.service\";\nexport let DetailsEffects = /*#__PURE__*/(() => {\n  class DetailsEffects {\n    constructor(actions$, store, weatherService) {\n      this.actions$ = actions$;\n      this.store = store;\n      this.weatherService = weatherService;\n      this.loadCurrentWeather$ = createEffect(() => this.actions$.pipe(ofType(fromDetailsActions.loadWeatherDetails), withLatestFrom(this.store.pipe(select(fromRouterSelectors.selectRouterQueryParams))), mergeMap(([, queryParams]) => combineLatest([this.weatherService.getCityWeatherByCoord(queryParams.lat, queryParams.lon), this.weatherService.getWeatherDetails(queryParams.lat, queryParams.lon)])), catchError((err, caught$) => {\n        this.store.dispatch(fromDetailsActions.loadWeatherDetailsFailed());\n        return caught$;\n      }), map(([current, daily]) => {\n        const entity = daily;\n        entity.city = Object.assign(Object.assign({}, current.city), {\n          timeZone: daily.city.timeZone\n        });\n        return fromDetailsActions.loadWeatherDetailsSuccess({\n          entity\n        });\n      })));\n    }\n\n  }\n\n  DetailsEffects.ɵfac = function DetailsEffects_Factory(t) {\n    return new (t || DetailsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.WeatherService));\n  };\n\n  DetailsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DetailsEffects,\n    factory: DetailsEffects.ɵfac\n  });\n  return DetailsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}