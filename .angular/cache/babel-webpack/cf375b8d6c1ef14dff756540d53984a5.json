{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { select } from '@ngrx/store';\nimport { combineLatest, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Bookmark } from 'src/app/shared/models/bookmark.model';\nimport * as fromHomeActions from 'src/app/pages/home/state/home.actions';\nimport * as fromHomeSelectors from 'src/app/pages/home/state/home.selectors';\nimport * as fromBookmarksSelectors from '../../../bookmarks/state/bookmarks.selectors';\nimport * as fromConfigSelectors from '../../../../shared/state/config/config.selectors';\nlet HomePage = class HomePage {\n  constructor(store, componentFactoryResolver, appRef, injector) {\n    this.store = store;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.appRef = appRef;\n    this.injector = injector;\n    this.componentDestroyed$ = new Subject();\n  }\n\n  ngOnInit() {\n    this.searchControl = new FormControl('', Validators.required);\n    this.searchControlWithAutocomplete = new FormControl(undefined);\n    this.searchControlWithAutocomplete.valueChanges.pipe(takeUntil(this.componentDestroyed$)).subscribe(value => {\n      if (!!value) {\n        this.store.dispatch(fromHomeActions.loadCurrentWeatherById({\n          id: value.geonameid.toString()\n        }));\n      }\n    });\n    this.cityWeather$ = this.store.pipe(select(fromHomeSelectors.selectCurrentWeather));\n    this.cityWeather$.pipe(takeUntil(this.componentDestroyed$)).subscribe(value => this.cityWeather = value);\n    this.loading$ = this.store.pipe(select(fromHomeSelectors.selectCurrentWeatherLoading));\n    this.error$ = this.store.pipe(select(fromHomeSelectors.selectCurrentWeatherError));\n    this.bookmarksList$ = this.store.pipe(select(fromBookmarksSelectors.selectBookmarksList));\n    this.unit$ = this.store.pipe(select(fromConfigSelectors.selectUnitConfig));\n    this.isCurrentFavorite$ = combineLatest([this.cityWeather$, this.bookmarksList$]).pipe(map(([current, bookmarksList]) => {\n      if (!!current) {\n        return bookmarksList.some(bookmark => bookmark.id === current.city.id);\n      }\n\n      return false;\n    }));\n    this.setupPortal();\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed$.next();\n    this.componentDestroyed$.unsubscribe();\n    this.store.dispatch(fromHomeActions.clearHomeState());\n    this.portalOutlet.detach();\n  }\n\n  doSearch() {\n    const query = this.searchControl.value;\n    this.store.dispatch(fromHomeActions.loadCurrentWeather({\n      query\n    }));\n  }\n\n  onToggleBookmark() {\n    const bookmark = new Bookmark();\n    bookmark.id = this.cityWeather.city.id;\n    bookmark.name = this.cityWeather.city.name;\n    bookmark.country = this.cityWeather.city.country;\n    bookmark.coord = this.cityWeather.city.coord;\n    this.store.dispatch(fromHomeActions.toggleBookmark({\n      entity: bookmark\n    }));\n  }\n\n  setupPortal() {\n    const el = document.querySelector('#navbar-portal-outlet');\n    this.portalOutlet = new DomPortalOutlet(el, this.componentFactoryResolver, this.appRef, this.injector);\n    this.portalOutlet.attach(new ComponentPortal(UnitSelectorComponent));\n  }\n\n};\nHomePage = __decorate([Component({\n  selector: 'jv-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss']\n})], HomePage);\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module"}