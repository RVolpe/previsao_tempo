{"ast":null,"code":"import { unitToSymbol } from 'src/app/shared/utils/units.utils';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let DailyWeatherComponent = /*#__PURE__*/(() => {\n  class DailyWeatherComponent {\n    get weather() {\n      return this.dailyWeather.weather;\n    }\n\n    get date() {\n      return moment.unix(this.dailyWeather.date).format('DD MMM - dddd');\n    }\n\n    get icon() {\n      return `http://openweathermap.org/img/wn/${this.weather.icon}@2x.png`;\n    }\n\n    get unitSymbol() {\n      return unitToSymbol(this.unit);\n    }\n\n    unixToHourMinute(value) {\n      return moment.unix(value).tz(this.timeZone).format('HH:mm');\n    }\n\n  }\n\n  DailyWeatherComponent.ɵfac = function DailyWeatherComponent_Factory(t) {\n    return new (t || DailyWeatherComponent)();\n  };\n\n  DailyWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DailyWeatherComponent,\n    selectors: [[\"jv-daily-weather\"]],\n    inputs: {\n      dailyWeather: \"dailyWeather\",\n      timeZone: \"timeZone\",\n      unit: \"unit\"\n    },\n    decls: 19,\n    vars: 12,\n    consts: [[1, \"card\"], [1, \"badge\", \"badge-secondary\"], [3, \"src\"]],\n    template: function DailyWeatherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"span\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"uppercase\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵelement(6, \"img\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵelementStart(8, \"div\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵelementStart(15, \"div\");\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\");\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 10, ctx.date));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"src\", ctx.icon, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate4(\"\", ctx.weather.minTemp, \" \", ctx.unitSymbol, \" - \", ctx.weather.maxTemp, \" \", ctx.unitSymbol, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Humidade: \", ctx.weather.humidity, \" %\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Velocidade do vento: \", ctx.weather.wind.speed, \" m/s\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Nascer do sol: \", ctx.unixToHourMinute(ctx.weather.sunrise), \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"P\\u00F4r do sol: \", ctx.unixToHourMinute(ctx.weather.sunset), \"\");\n      }\n    },\n    pipes: [i1.UpperCasePipe],\n    styles: [\".card[_ngcontent-%COMP%]{margin-top:8px;padding:8px;display:flex;flex-direction:column}.card[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.card[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{margin-top:8px;display:grid;grid-template-columns:1fr 1fr 1fr;grid-column-gap:8px;align-items:center}.card[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center}.card[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{width:50px;height:50px}\"],\n    changeDetection: 0\n  });\n  return DailyWeatherComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}